# nginx configuration that listens on port 80 and 443, expose
# which ever you need. files imported from Docker either through
# the build process or volume mapping are denoted with a 
# trailing comment `# USER_DEFINED`

http {
  server_tokens off;
  include /etc/nginx/mime.types;
  default_type application/octet-stream;
  ssl_password_file /etc/nginx/auth/passwords; # USER_DEFINED
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_prefer_server_ciphers on;
  access_log /var/log/nginx/access.log;
  error_log /var/log/nginx/error.log;
  gzip on;
  gzip_disable "msie6";

  map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
  }

  upstream websocket {
    server 127.0.0.1:3000;
  }

  server {
    listen 80;

    location / {
      proxy_pass http://127.0.0.1:3000;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;

      auth_basic "webtty authentication";
      auth_basic_user_file /etc/nginx/auth/basic; # USER_DEFINED
    }

    location /terminal {
      proxy_pass http://websocket;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
    }
  }

  server {
    listen 443 ssl;
    ssl_protocols TLSv1.1 TLSv1.2;
    ## server side SSL certificates
    ssl_certificate /etc/nginx/certs/cert.pem; # USER_DEFINED
    ssl_certificate_key /etc/nginx/certs/key.pem; # USER_DEFINED
    ## client side SSL certifcate
    ssl_client_certificate /etc/nginx/auth/user.crt; # USER_DEFINED
    ssl_verify_client optional;

    location / {
      proxy_pass http://127.0.0.1:3000;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;

      auth_basic "webtty authentication";
      auth_basic_user_file /etc/nginx/auth/basic; # USER_DEFINED
      if ($ssl_client_verify != SUCCESS) {
        return 403;
      }
    }

    location /terminal {
      proxy_pass http://websocket;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
    }
  }
}

events {
  worker_connections 1024;
}